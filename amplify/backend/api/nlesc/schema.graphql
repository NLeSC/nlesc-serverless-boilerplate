type Mutation {
  markAsCompleted(todoId: ID!): ID @function(name: "nlesc-markAsCompleted-${env}")
  # Returns a Job identifier
  submitJob(jobdescriptionid: ID!): ID @function(name: "nlesc-jobsubmit-${env}")
  # Returns a Job identifier
  cancelJob(jobid: ID!): ID @function(name: "nlesc-jobcancel-${env}")
}

type Todo
  @model
  @auth(rules: [
    { allow: owner },
    { allow: groups, groups: ["admin"] }
  ]) {
  id: ID!
  name: String!
  description: String
  completed: Boolean
  owner: String
  createdAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
  updatedAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
}

type JobDescription
  @model
  @auth(rules: [
    { allow: owner },
    { allow: groups, groups: ["admin"] }
  ]) {
  id: ID!
  payload: JobPayload
  jobs: [Job] @connection(fields: ["id"])
  owner: String
  createdAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
  updatedAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
}

# Customizing the jobs description payload should be done on this type
type JobPayload {
  count: Int!
}

type Job
  @model
  @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["admin"], operations: [read] }
  ]) {
  id: ID!
  status: JobStatus
  result: JobResult
  jobDescriptionID: ID!
  description: JobDescription @connection(fields: ["jobDescriptionID"])
  owner: String
  createdAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
  updatedAt: AWSDateTime @auth(rules: [{ allow: owner, operations: [read] }])
}

enum JobState {
    UNKNOWN
    #"Below are job states of an AWS Batch job (https://docs.aws.amazon.com/batch/latest/userguide/job_states.html)"
    SUBMITTED
    PENDING
    RUNNABLE
    STARTING
    RUNNING
    SUCCEEDED
    FAILED
}

type JobStatus {
    state: JobState!
    # Filled if state==FAILED
    error: String
    # Identity id of user of submitted job
    submittedBy: String!
    submittedAt: AWSDateTime!
    completedAt: AWSDateTime
    updatedAt: AWSDateTime
    # Fraction of progress of a running job
    progress: Float
    # Message at progress of a running job
    progressMessage: String
}

# Customizing the jobs result should be done on this type
type JobResult {
  output: String
}